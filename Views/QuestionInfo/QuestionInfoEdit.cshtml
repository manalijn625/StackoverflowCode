@model StackOverFlow.Models.QuestionInfo
@{
    ViewBag.Title = "QuestionInfoEdit";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}

@*<h2>Update Question </h2>*@
@using (Html.BeginForm("QuestionInfoEdit", "QuestionInfo"))
{
    @*@Html.AntiForgeryToken()*@

    <div class="form-horizontal">
        <h4>Update Question</h4>
        <hr />
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
        @Html.HiddenFor(model => model.question.QuestionId)
        @Html.HiddenFor(model => model.question.CreatedOn)
        @Html.HiddenFor(model => model.question.IsOpen)
        @Html.HiddenFor(model => model.question.UpdatedOn)
        @Html.HiddenFor(model => model.question.UserId)
        @Html.HiddenFor(model => model.question.ViewCount)
      

        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.Title)

        @*<div class="form-group">
            @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.question.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.question.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.question.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.question.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextAreaFor(model => model.question.Description, 6, 500, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.question.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.CreatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.UpdatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UpdatedOn, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UpdatedOn, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
            @Html.LabelFor(model => model.ViewCount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ViewCount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ViewCount, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @*<div class="form-group">
           @Html.LabelFor(model => model.IsOpen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Html.EditorFor(model => model.IsOpen, new { htmlAttributes = new { @class = "" } })
                    @Html.ValidationMessageFor(model => model.IsOpen, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@
        <div class="form-group">
            @Html.LabelFor(model => model.CommaSeperatedTags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.CommaSeperatedTags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CommaSeperatedTags, "", new { @class = "text-danger" })

            </div>

            }


        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="QuestionInfoEdit" value="Update" class="btn btn-default" />
            </div>
        </div>
    </div>
}

